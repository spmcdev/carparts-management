# Railway CI/CD Pipeline
# This workflow deploys to staging first, then production after approval

name: Railway CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Run tests first
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Backend tests
      - name: Install backend dependencies
        run: npm ci
      
      - name: Run backend tests
        run: npm test
        env:
          NODE_ENV: test
      
      # Frontend tests
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Deploy to staging on develop branch or PR
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://carparts-staging.up.railway.app
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy Backend to Staging
        if: ${{ secrets.RAILWAY_STAGING_TOKEN != '' }}
        run: railway up --service backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
      
      - name: Deploy Frontend to Staging
        if: ${{ secrets.RAILWAY_STAGING_TOKEN != '' }}
        run: |
          cd frontend
          # Use staging environment file
          cp .env.staging .env
          railway up --service frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
      
      - name: Run staging health check
        run: |
          sleep 30  # Wait for deployment
          curl -f https://carparts-staging-api.up.railway.app/health || exit 1

  # Deploy to production on main branch (requires approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://carparts.up.railway.app
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy Backend to Production
        if: ${{ secrets.RAILWAY_PRODUCTION_TOKEN != '' }}
        run: railway up --service backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
      
      - name: Deploy Frontend to Production
        if: ${{ secrets.RAILWAY_PRODUCTION_TOKEN != '' }}
        run: |
          cd frontend
          # Use production environment file
          cp .env.production .env
          railway up --service frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
      
      - name: Run production health check
        run: |
          sleep 30  # Wait for deployment
          curl -f https://carparts-api.up.railway.app/health || exit 1
      
      - name: Notify success
        run: echo "ðŸš€ Production deployment successful!"
